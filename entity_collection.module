<?php

/**
 * Imeplements hook_menu().
 */
function entity_collection_menu() {
  $items = array();
  $items['admin/structure/entity_collection'] = array(
    'title' => 'Entity Collections',
    'page callback' => 'entity_collection_admin',
    'description' => t('Administer entity_collections'),
    'access arguments' => array('administer entity_collections'),
    'file' => 'entity_collection.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['entity-collection/%entity_collection'] = array(
    'title' => 'Entity Collection',
    'page callback' => 'entity_collection_page',
    'page arguments' => array(1),
    'access arguments' => array('view', 1),
    'access callback' => 'entity_collection_access',
    'file' => 'entity_collection.pages.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['entity-collection/%entity_collection/view'] = array(
    'title' => 'View',
    'page callback' => 'entity_collection_page',
    'page arguments' => array(1),
    'access arguments' => array('view', 1),
    'access callback' => 'entity_collection_access',
    'file' => 'entity_collection.pages.inc',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['entity-collection/%entity_collection/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('entity_collection_edit_form', 1),
    'access arguments' => array('edit', 1),
    'access callback' => 'entity_collection_access',
    'file' => 'entity_collection.admin.inc',
    'type' => MENU_LOCAL_TASK,
  	'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );
  $items['entity-collection/%entity_collection/content'] = array(
    'title' => 'Content',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('entity_collection_content_form', 1),
    'access arguments' => array('content', 1),
    'access callback' => 'entity_collection_access',
    'file' => 'entity_collection.admin.inc',
    'type' => MENU_LOCAL_TASK,
  	'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );
  $items['entity-collection/%entity_collection/delete'] = array(
    'title' => 'Delete Entity collection',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('entity_collection_delete_form', 1),
    'access callback' => 'entity_collection_access',
    'access arguments' => array('delete', 1),
    'file' => 'entity_collection.admin.inc',
    'type' => MENU_CALLBACK,
  );
  
  $items['entity-collection/%entity_collection/content/delete/%/%'] = array(
    'title' => 'Delete content',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('entity_collection_content_delete_form', 1, 4, 5),
    'access arguments' => array('content', 1),
    'access callback' => 'entity_collection_access',
    'file' => 'entity_collection.admin.inc',
    'type' => MENU_CALLBACK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );
  $entity_collection_bundles = entity_collection_bundles();
  // If we are using the block module, then we add links from there.
  foreach ($entity_collection_bundles as $key => $info) {
    $items['admin/structure/entity_collection/add/' . $info->name] = array(
      'title' => 'Add ' . drupal_strtolower($info->label),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('entity_collection_add_form', 4),
      'access arguments' => array("create {$info->name} entity blocks"),
      'file' => 'entity_collection.admin.inc',
      'type' => MENU_LOCAL_ACTION,
    );
  }
  $items['entity_collection/autocomplete'] = array(
    'title' => 'entity_collection autocomplete',
    'page callback' => 'entity_collection_content_form_autocomplete',
    'access callback' => 'user_access',
    'access arguments' => array('administer entity_collections'),
    'type' => MENU_CALLBACK,
    'file' => 'entity_collection.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_entity_info().
 */
function entity_collection_entity_info() {
  $bundles = entity_collection_bundles();
  $bundle_info = array();
  foreach ($bundles as $key => $bundle) {
    $bundle_info[$bundle->name] = array(
      'label' => $bundle->label,
      'admin' => array(
        'path' => 'admin/structure/entity_collection_bundle/list/%entity_collection_bundle/edit',
        'real path' => 'admin/structure/entity_collection_bundle/list/' . $bundle->name . '/edit',
        'bundle argument' => 4,
        'access arguments' => array('administer entity_collection types'),
      ),
    );
  }
  return array(
    'entity_collection' => array(
      'label' => t('Entity Collection'),
      'entity class' => 'EntityCollection',
      'controller class' => 'EntityAPIController',
      'fieldable' => TRUE,
      'exportable' => TRUE,
      'view modes' => array(
        'block' => array(
          'label' => t('Region Block'),
          'custom settings' => FALSE,
        ),
        'full' => array(
          'label' => t('Full content'),
          'custom settings' => FALSE,
        ),
      ),
      'access callback' => 'entity_collection_access',
      'base table' => 'entity_collection_collections',
      'module' => 'entity_collection',
      'bundles' => $bundle_info,
      'bundle keys' => array('bundle' => 'name'),
      'entity keys' => array(
        'id' => 'rid',
        'name' => 'name',
        'bundle' => 'bundle',
        'label' => 'title',
      ),
    ),
  );
}

/**
 * Fetch all bundles for a entity_collection.
 * @return array
 *   An array of all available bundles.
 */
function entity_collection_bundles() {
  ctools_include('export');
  return ctools_export_load_object('entity_collection_bundles');
}

/**
 * Load a entity_collection bundle
 * @param $name
 *   The name of the bundle.
 * @return stdClass
 *   The actual bundle.
 */
function entity_collection_bundle_load($name) {
  ctools_include('export');
  $result = ctools_export_load_object('entity_collection_bundles', 'names', array($name));
  return isset($result[$name]) ?  $result[$name] : FALSE;
}

/**
 * Load a entity_collection by name
 * @param string $name the name of the entity_collection.
 */
function entity_collection_load($name) {
  $query = new EntityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'entity_collection')
    ->propertyCondition('name', $name)
    ->execute();
  if (isset($result['entity_collection']) && count($result['entity_collection'])) {
    return current(entity_load('entity_collection', array_keys($result['entity_collection'])));
  }
  return FALSE;
}

function entity_collection_load_all() {
  $query = new EntityFieldQuery();
  $result = $query->entityCondition('entity_type', 'entity_collection')->execute();
  if (isset($result['entity_collection'])) {
    return entity_load('entity_collection', array_keys($result['entity_collection']));
  }
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function entity_collection_ctools_plugin_directory($module, $type) {
  $types = array(
    'export_ui',
    'entity_collection_style',
  	'entity_collection_row',
    'cache',
    'content_types',
  );
  if (in_array($type, $types)) {
    return 'plugins/' . $type;
  }
}

/**
 * Implements hook_ctools_plugin_plugin_type().
 */
function entity_collection_ctools_plugin_type() {
  return array(
    'plugins' => array(
      'cache' => TRUE,
      'use hooks' => TRUE,
      'classes' => array(
      	'entity_collection_storage',
      	'entity_collection_style',
      	'entity_collection_row'),
    ),
  );
}

/**
 * Implements hook_entity_collection_plugins().
 */
function entity_collection_entity_collection_plugins() {
  $path = drupal_get_path('module', 'entity_collection') . '/plugins/entity_collection_style';
  $info['entity_collection_style_flat'] = array(
    'title' => t('Flat list'),
    'entity_collection_style' => array(
      'parent' => 'EntityCollectionStyle',
      'class' => 'EntityCollectionStyleFlat',
      'file' => 'entity_collection_style_flat.inc',
      'path' => $path,
    ),
  );
  return $info;
}

/**
 * Implements hook_permission().
 */
function entity_collection_permission() {
  $permissions = array(
    'administer entity_collection types' =>  array(
      'title' => t('Administer entity_collection types'),
      'description' => t('Create and delete fields on entity_collections, and set their permissions.'),
    ),
  );
  /*
  // Generate per profile type permissions.
  foreach (entityblock_get_types() as $type) {
    $type_name = check_plain($type->type);
    $permissions += array(
      "create $type_name entity blocks" => array(
        'title' => t('%type_name: Create entity block', array('%type_name' => $type->label)),
      ),
      "edit $type_name entity blocks" => array(
        'title' => t('%type_name: Edit entity block', array('%type_name' => $type->label)),
      ),
      "view $type_name entity blocks" => array(
        'title' => t('%type_name: View entity block', array('%type_name' => $type->label)),
      ),
      "delete $type_name entity blocks" => array(
        'title' => t('%type_name: Delete entity block', array('%type_name' => $type->label)),
      ),
    );
  }
   */
  return $permissions;
}

/**
 * Implements hook_theme().
 */
function entity_collection_theme() {
  return array(
    'entity_collection_content_form' => array(
      'render element' => 'form',
    ),
  	'entity_collection' => array(
      'template' => 'entity_collection',
      'render element' => 'element',
    ),
  );
}

function template_preprocess_entity_collection(&$variables) {
  // Here we take the object that is being themed and define some useful
  // variables that we will print in the template file.
  $variables['collection'] = isset($variables['element']['entity_collection']) ? $variables['element']['entity_collection'] : array();
  $variables['title'] = $variables['element']['#entity_collection']->title;
  // Never show title, for now.
  $variables['show_title'] = FALSE;
}

/**
 * Access callback for entity_collections.
 */
function entity_collection_access($op, $entity_collection, $account = NULL) {
  if (isset($entity_collection)) {
    return user_access("$op {$entity_collection->bundle} profile", $account);
  }
}

/**
 * Implements hook_block_info().
 */
function entity_collection_block_info() {
  $entity_collections = array();
  // Load all blocks
  $entity_collections = entity_load('entity_collection');
  foreach ($entity_collections as $entity_collection) {
    $blocks[$entity_collection->name] = array(
      'info' => $entity_collection->title,
      'cache' => $entity_collection->cache,
    );
  }
  return $blocks;
}

/**
 * Implements hook_block_configure().
 */
function entity_collection_block_configure($delta) {
  $block = entity_load('entity_collection', array($delta));
  if (user_access("edit {$block->bundle} entity blocks")) {
    $form_state = array('type' => $block->bundle, 'entityblock' => $block);
    // We attach our entity block form here.
    return entityblock_form(array(), $form_state);
  }
}

/**
 * Implements hook_block_view().
 */
function entity_collection_block_view($delta) {
  $block = array();
  // The delta is always the same as the machine name of the
  // entity block, so it's fairly easy to load.
  $entity_collection = entity_load('entity_collection', array($delta));
  if ($entityblock && user_access("view {$entityblock->type} entity blocks")) {
    $block['subject'] = check_plain($entityblock->title);
    $block['content'] = $entityblock->buildContent();
    return $block;
  }
}

/**
 * Get all storage backends formatted for #options
 * @return array
 *   An array of storage backends.
 */
function entity_collection_get_storage_options() {
  $storage_plugins = ctools_get_plugins('entity_collection', 'plugins');
  // Get all available storage backends.
  $storage_options = array();
  foreach ($storage_plugins as $name => $info) {
    if (isset($info['title']) && isset($info['entity_collection_storage'])) {
      $storage_options[$name] = $info['title'];
    }
  }
  return $storage_options;
}

/**
 * Get all renderers formatted for #options
 * @return array
 *   An array of storage backends.
 */
function entity_collection_get_style_options() {
  ctools_include('plugins');
  $plugins = ctools_get_plugins('entity_collection', 'plugins');
  // Get all available storage backends.
  $options = array();
  foreach ($plugins as $name => $info) {
    if (isset($info['title']) && isset($info['entity_collection_renderer'])) {
      $options[$name] = $info['title'];
    }
  }
  return $options;
}

/**
 * Save the content of a entity_collection.
 * @param string $name
 *   The entity_collection name
 * @param RegioNode $tree
 *   The tree to save.
 */
function entity_collection_save_content($name, $bundle, EntityCollectionTreeNode $tree) {
  return EntityCollectionStorage::getStorage($bundle)->save($name, $tree);
}

function entity_collection_append_item($name, $bundle, EntityCollectionTreeNode $item) {
  return EntityCollectionStorage::getStorage($bundle)->appendItem($name, $item);
}

/**
 * Load content for a entity_collection.
 * @param string $bundle
 *   The name of the entity_collection bundle
 * @param string $name
 *   The name of the entity_collection.
 * @return EntityCollectionTreeNode the content for a entity_collection.
 */
function entity_collection_load_content($bundle, $name) {
  return EntityCollectionStorage::getStorage($bundle)->retrieve($name);
}


function entity_collection_admin_paths() {
  return array('entity-collection/*' => TRUE);
}

/**
 * Implements hook_entity_load().
 */
function entity_collection_entity_load($entities, $type) {
  // Decode settings object.
  if ($type == 'entity_collection') {
    foreach ($entities as $entity) {
      if (isset($entity->settings)) {
        $entity->settings = unserialize($entity->settings);
      }
      else {
        $entity->settings = new stdClass;
      }
    }
  }
}

function entity_collection_entity_presave($entity, $type) {
  if ($type == 'entity_collection' && isset($entity->settings)) {
    $entity->settings = serialize($entity->settings);
  }
}

function entity_collection_entity_delete($entity, $type) {
  $collections = entity_collection_load_all();
  if (!empty($collections)) {
    list($id) = entity_extract_ids($type, $entity);
    foreach ($collections as $collection) {
      EntityCollectionStorage::getStorage($collection->bundle)->delete($collection, $type, array($id));
    }
  }
  // Remove any data attached to this entity collection.
  if ($type == 'entity_collection') {
    EntityCollectionStorage::getStorage($entity->bundle)->drop($entity);
    field_attach_delete($type, $entity);
  }
}

function entity_collection_contextual_links_view_alter(&$element, $items) {
  if (isset($element['#element']['#entity_collection'])) {
    $element['#links']['entity-collection-delete'] = array(
      'title' => t('Delete from collection'),
      'href' => 'entity-collection/' . $element['#element']['#entity_collection']->name . '/content/delete/node/' . $element['#element']['#node']->nid,
      'query' => array('destination' => current_path()),
    );
  }
}